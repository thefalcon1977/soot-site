# Generated by Django 5.1.5 on 2025-02-09 06:52

import django.core.validators
import django.db.models.deletion
import django_ckeditor_5.fields
import phonenumber_field.modelfields
import sorl.thumbnail.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified at')),
                ('alternate_text', models.CharField(blank=True, help_text='Write about picture for SEO', max_length=110, null=True, validators=[django.core.validators.MaxLengthValidator(150), django.core.validators.MinLengthValidator(3)], verbose_name='Picture Alternate Text')),
                ('width_field', models.PositiveSmallIntegerField(blank=True, editable=False, help_text="size of picture's Width", null=True, verbose_name='Picture Width')),
                ('height_field', models.PositiveSmallIntegerField(blank=True, editable=False, help_text="size of picture's Height", null=True, verbose_name='Picture Height')),
                ('title', models.CharField(blank=True, db_comment='The title of the banner; optional, max 110 characters.', help_text='Enter the title of the banner. Keep it concise and informative. (Max 30 characters)', max_length=30, null=True, verbose_name='Title')),
                ('picture', sorl.thumbnail.fields.ImageField(db_comment='Path to the banner image file, with details on dimensions.', height_field='height_field', help_text='Upload the banner image. Supported formats include JPG, PNG, etc.', max_length=110, upload_to='', verbose_name='Picture', width_field='width_field')),
            ],
            options={
                'verbose_name': 'Banner',
                'verbose_name_plural': 'Banners',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(db_comment='The full name of the person submitting the contact form.', help_text='Please enter your full name.', max_length=255, verbose_name='Full Name')),
                ('email', models.EmailField(db_comment='The email address of the person submitting the contact form.', help_text='Please enter a valid email address.', max_length=254, verbose_name='Email Address')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_comment='The phone number of the person submitting the contact form.', help_text='Please enter a valid phone number.', max_length=128, region='IR', verbose_name='Phone Number')),
                ('subject', models.CharField(db_comment='The subject of the contact request.', help_text='Please enter the subject of your message.', max_length=255, verbose_name='Subject')),
                ('message', models.TextField(db_comment='The main body of the contact request.', help_text='Please enter your message.', verbose_name='Message')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Timestamp when the contact form was submitted.', help_text='The date and time when the contact form was submitted.', verbose_name='Date Created')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'db_table': 'contact_messages',
                'db_table_comment': 'Table storing contact messages submitted via the website.',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified at')),
                ('alternate_text', models.CharField(blank=True, help_text='Write about picture for SEO', max_length=110, null=True, validators=[django.core.validators.MaxLengthValidator(150), django.core.validators.MinLengthValidator(3)], verbose_name='Picture Alternate Text')),
                ('width_field', models.PositiveSmallIntegerField(blank=True, editable=False, help_text="size of picture's Width", null=True, verbose_name='Picture Width')),
                ('height_field', models.PositiveSmallIntegerField(blank=True, editable=False, help_text="size of picture's Height", null=True, verbose_name='Picture Height')),
                ('image', sorl.thumbnail.fields.ImageField(blank=True, db_comment='Stores images in the gallery.', help_text='Upload an image for the gallery.', null=True, upload_to='gallery/images/', verbose_name='Image')),
            ],
            options={
                'verbose_name': 'Gallery',
                'verbose_name_plural': 'Galleries',
                'db_table': 'gallery',
                'db_table_comment': 'Table storing images and videos uploaded by users.',
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified at')),
                ('title', models.CharField(db_comment='Stores the unique title of the instance.', help_text='Enter a unique title.', max_length=255, unique=True, verbose_name='Title')),
                ('title_en', models.CharField(db_comment='Stores the unique title of the instance.', help_text='Enter a unique title.', max_length=255, null=True, unique=True, verbose_name='Title')),
                ('title_fa', models.CharField(db_comment='Stores the unique title of the instance.', help_text='Enter a unique title.', max_length=255, null=True, unique=True, verbose_name='Title')),
                ('slug', models.SlugField(allow_unicode=True, db_comment='Stores the URL-friendly slug derived from the title.', help_text='URL-friendly slug from the title.', max_length=255, unique=True, verbose_name='Slug')),
                ('alternate_text', models.CharField(blank=True, help_text='Write about picture for SEO', max_length=110, null=True, validators=[django.core.validators.MaxLengthValidator(150), django.core.validators.MinLengthValidator(3)], verbose_name='Picture Alternate Text')),
                ('width_field', models.PositiveSmallIntegerField(blank=True, editable=False, help_text="size of picture's Width", null=True, verbose_name='Picture Width')),
                ('height_field', models.PositiveSmallIntegerField(blank=True, editable=False, help_text="size of picture's Height", null=True, verbose_name='Picture Height')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(db_comment='Stores the detailed description of the instrument.', help_text='Provide a detailed description of the musical instrument, including features and specifications.', verbose_name='Description')),
                ('description_en', django_ckeditor_5.fields.CKEditor5Field(db_comment='Stores the detailed description of the instrument.', help_text='Provide a detailed description of the musical instrument, including features and specifications.', null=True, verbose_name='Description')),
                ('description_fa', django_ckeditor_5.fields.CKEditor5Field(db_comment='Stores the detailed description of the instrument.', help_text='Provide a detailed description of the musical instrument, including features and specifications.', null=True, verbose_name='Description')),
                ('image', sorl.thumbnail.fields.ImageField(db_comment='Image representing the musical instrument.', help_text='Upload an image of the musical instrument.', upload_to='music/instruments/', verbose_name='Instrument Image')),
                ('instructors', models.ManyToManyField(blank=True, db_comment="Many-to-many relationship with users who belong to the 'Instructor' group.", help_text='Select users who are instructors and associated with this instrument.', limit_choices_to={'groups__name': 'instructor'}, null=True, related_name='musical_instruments', to=settings.AUTH_USER_MODEL, verbose_name='Instructors')),
            ],
            options={
                'verbose_name': 'Instrument',
                'verbose_name_plural': 'Instruments',
                'db_table': 'musical_instruments',
                'db_table_comment': 'Table storing different types of musical instruments.',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified at')),
                ('alternate_text', models.CharField(blank=True, help_text='Write about picture for SEO', max_length=110, null=True, validators=[django.core.validators.MaxLengthValidator(150), django.core.validators.MinLengthValidator(3)], verbose_name='Picture Alternate Text')),
                ('width_field', models.PositiveSmallIntegerField(blank=True, editable=False, help_text="size of picture's Width", null=True, verbose_name='Picture Width')),
                ('height_field', models.PositiveSmallIntegerField(blank=True, editable=False, help_text="size of picture's Height", null=True, verbose_name='Picture Height')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, db_comment="Stores the user's profile description.", help_text='Provide a short biography or other relevant information about the user.', verbose_name='Description')),
                ('picture', sorl.thumbnail.fields.ImageField(db_comment='Profile image representing the user.', help_text='Upload a profile picture.', upload_to='profiles/pictures/', verbose_name='Profile Picture')),
                ('user', models.OneToOneField(db_comment='One-to-one relationship with the user model.', help_text='The user associated with this profile.', on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'db_table': 'user_profiles',
                'db_table_comment': 'Table storing user profile information.',
            },
        ),
    ]
